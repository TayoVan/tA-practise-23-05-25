package cats.puzzles;

public class CatsPuzzleGame {

    // ============ –ó–ê–î–ê–ß–ê 1: N –ö–û–¢–ò–ö–Ü–í –ù–ê NxN –î–û–®–¶–Ü ============

    public static class NCatsProblem {
        private int n;
        private int[][] board;
        private boolean solved;

        public NCatsProblem(int n) {
            this.n = n;
            this.board = new int[n][n];
            this.solved = false;
        }

        public boolean solve() {
            return placeCats(0);
        }

        private boolean placeCats(int row) {
            if (row == n) {
                solved = true;
                return true;
            }

            for (int col = 0; col < n; col++) {
                if (isSafe(row, col)) {
                    board[row][col] = 1;

                    if (placeCats(row + 1)) {
                        return true;
                    }

                    board[row][col] = 0;
                }
            }
            return false;
        }

        private boolean isSafe(int row, int col) {
            for (int i = 0; i < n; i++) {
                if (board[row][i] == 1 || board[i][col] == 1) {
                    return false;
                }
            }
            return true;
        }

        public void printSolution() {
            if (!solved) {
                System.out.println("–ö–æ—Ç–∏–∫–∏ –Ω–µ –∑–∞—Ö–æ—Ç—ñ–ª–∏ —Å—ñ–¥–∞—Ç–∏ –Ω–∞ " + n + "x" + n + " –¥–æ—à–∫—É!");
                return;
            }

            System.out.println("–ú—É—Ä-—Ä! –ö–æ—Ç–∏–∫–∏ —Ä–æ–∑–º—ñ—Å—Ç–∏–ª–∏—Å—å –Ω–∞ " + n + "x" + n + " –¥–æ—à—Ü—ñ:");
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    System.out.print(board[i][j] == 1 ? "üêæ " : ". ");
                }
                System.out.println();
            }
            System.out.println();
        }
    }

    // ============ –ó–ê–î–ê–ß–ê 2: –ö–û–¢–ò–ö–ò, –©–û –°–¢–†–ò–ë–ê–Æ–¢–¨ –ü–û –î–Ü–ê–ì–û–ù–ê–õ–Ü ============

    public static class NCatsDiagonalProblem {
        private int n;
        private int[][] board;
        private boolean solved;

        public NCatsDiagonalProblem(int n) {
            this.n = n;
            this.board = new int[n][n];
            this.solved = false;
        }

        public boolean solve() {
            return placeJumpingCats(0, 0, 0);
        }

        private boolean placeJumpingCats(int row, int col, int count) {
            if (count == n) {
                solved = true;
                return true;
            }

            if (row == n) {
                return false;
            }

            int nextRow = (col == n - 1) ? row + 1 : row;
            int nextCol = (col == n - 1) ? 0 : col + 1;

            if (isSafeDiagonal(row, col)) {
                board[row][col] = 1;

                if (placeJumpingCats(nextRow, nextCol, count + 1)) {
                    return true;
                }

                board[row][col] = 0;
            }

            return placeJumpingCats(nextRow, nextCol, count);
        }

        private boolean isSafeDiagonal(int row, int col) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (board[i][j] == 1 && Math.abs(i - row) == Math.abs(j - col)) {
                        return false;
                    }
                }
            }

            return true;
        }

        public void printSolution() {
            if (!solved) {
                System.out.println("–ö–æ—Ç—è—á—ñ —Å—Ç—Ä–∏–±–∫–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—è –Ω–∞ –¥–æ—à—Ü—ñ " + n + "x" + n + "!");
                return;
            }

            System.out.println("–ö–æ—Ç–∏–∫–∏ —Å—Ç—Ä–∏–±–Ω—É–ª–∏ –Ω–∞ " + n + "x" + n + " –¥–æ—à–∫—É:");
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    System.out.print(board[i][j] == 1 ? "üò∫ " : ". ");
                }
                System.out.println();
            }
            System.out.println();
        }
    }

    // ============ –ú–ï–ô–ù: –¢–ï–°–¢–ò –î–õ–Ø –ö–û–¢–ò–ö–Ü–í ============

    public static void main(String[] args) {
        System.out.println("=== –ú–£–†-–ú–£–†! –ö–û–¢–ò–ö–û–í–Ü –ó–ê–î–ê–ß–Ü ===\n");

        System.out.println("1. –ó–ê–î–ê–ß–ê –ü–†–û –ö–û–¢–ò–ö–Ü–í:");
        for (int n = 4; n <= 8; n++) {
            System.out.println("--- –ö–æ—Ç—è—á–∞ –¥–æ—à–∫–∞ " + n + "x" + n + " ---");
            NCatsProblem cats = new NCatsProblem(n);
            if (cats.solve()) {
                cats.printSolution();
            } else {
                System.out.println("–ú—è—É! –ù–µ –≤–¥–∞–ª–æ—Å—è!\n");
            }
        }

        System.out.println("\n2. –ö–û–¢–ò–ö–ò –ù–ê –î–Ü–ê–ì–û–ù–ê–õ–Ü:");
        for (int n = 4; n <= 6; n++) {
            System.out.println("--- –ö–æ—Ç—è—á–∞ –¥–æ—à–∫–∞ " + n + "x" + n + " ---");
            NCatsDiagonalProblem jumpCats = new NCatsDiagonalProblem(n);
            if (jumpCats.solve()) {
                jumpCats.printSolution();
            } else {
                System.out.println("–ú—è—É... –Ω–µ —Å—Ç—Ä–∏–±–Ω—É–ª–∏...\n");
            }
        }

        System.out.println("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ö–û–¢–ò–ö–Ü–í ===");

        System.out.println("8 –∫–æ—Ç–∏–∫—ñ–≤ –Ω–∞ 8x8 –¥–æ—à—Ü—ñ:");
        NCatsProblem cats8 = new NCatsProblem(8);
        cats8.solve();
        cats8.printSolution();

        System.out.println("8 —Å—Ç—Ä–∏–±–∫—ñ–≤ –∫–æ—Ç–∏–∫—ñ–≤ –Ω–∞ 8x8 –¥–æ—à—Ü—ñ:");
        NCatsDiagonalProblem jumpCats8 = new NCatsDiagonalProblem(8);
        jumpCats8.solve();
        jumpCats8.printSolution();
    }
}
